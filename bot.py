import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
import json
import os.path

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from google_calendar import get_upcoming_events, create_auth_url, process_auth_code, get_credentials_with_local_server

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
USER_ID = os.getenv("USER_ID")

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
TOKEN_DIR = os.getenv("TOKEN_DIR", ".")
DATA_DIR = os.getenv("DATA_DIR", ".")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(TOKEN_DIR, exist_ok=True)
os.makedirs(DATA_DIR, exist_ok=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def command_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –≤ Google Meet.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "1. –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /serverauth\n"
        "2. –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ): /localauth\n"
        "3. –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): /manualtoken"
    )
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –∏–º—è: {message.from_user.full_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ .env —Ñ–∞–π–ª
    if USER_ID or USER_ID == str(user_id):
        await message.answer(f"–í–∞—à ID {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª")

# –ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command("week"))
async def check_week_meetings(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    token_file = os.path.join(TOKEN_DIR, f'token_{user_id}.json')
    if not os.path.exists(token_file):
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        now = datetime.now(timezone.utc)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        current_weekday = today.weekday()
        if current_weekday >= 5:  # –°—É–±–±–æ—Ç–∞ (5) –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
            # –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            week_start = today + timedelta(days=(7 - current_weekday))
        else:
            # –¢–µ–∫—É—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            week_start = today - timedelta(days=current_weekday)
            
        events = await get_upcoming_events(
            time_min=week_start,
            time_max=week_start + timedelta(days=7),
            limit=20,
            user_id=user_id
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        active_events = []
        for event in events:
            end_time = event['end'].get('dateTime', event['end'].get('date'))
            end_dt = safe_parse_datetime(end_time)
            if end_dt > now:
                active_events.append(event)
        
        if not active_events:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(active_events)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        meetings_by_day = {}
        for event in active_events:
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            start_dt = safe_parse_datetime(start_time)
            day_key = start_dt.strftime('%d.%m.%Y')
            
            if day_key not in meetings_by_day:
                meetings_by_day[day_key] = []
            
            meetings_by_day[day_key].append(event)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = f"üìÜ {hbold(f'–í—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n\n"
            has_meetings = False
            
            for event in day_events:
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
                if 'hangoutLink' in event:
                    day_message += f"üïí {start_dt.strftime('%H:%M')} - {hbold(event['summary'])}\n"
                    day_message += f"üîó {event['hangoutLink']}\n\n"
                    has_meetings = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            if has_meetings:
                await message.answer(day_message, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("reset"))
async def reset_processed_events(message: Message):
    processed_events_file = os.path.join(DATA_DIR, 'processed_events.json')
    started_events_file = os.path.join(DATA_DIR, 'started_events.json')
    known_events_file = os.path.join(DATA_DIR, 'known_events.json')
    
    files_reset = []
    
    if os.path.exists(processed_events_file):
        os.remove(processed_events_file)
        files_reset.append("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö")
    
    if os.path.exists(started_events_file):
        os.remove(started_events_file)
        files_reset.append("—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–≤—à–∏—Ö—Å—è –≤—Å—Ç—Ä–µ—á–∞—Ö")
    
    if os.path.exists(known_events_file):
        os.remove(known_events_file)
        files_reset.append("—Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á")
    
    if files_reset:
        await message.answer(f"–ö—ç—à —Å–±—Ä–æ—à–µ–Ω: {', '.join(files_reset)}. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∫ –æ –Ω–æ–≤—ã—Ö.")
    else:
        await message.answer("–ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –ø—É—Å—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
def safe_parse_datetime(date_str):
    try:
        if date_str.endswith('Z'):
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        elif '+' in date_str or '-' in date_str and 'T' in date_str:
            return datetime.fromisoformat(date_str)
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º UTC
            return datetime.fromisoformat(date_str).replace(tzinfo=timezone.utc)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {date_str}: {e}")
        return datetime.now(timezone.utc)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def scheduled_meetings_check():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á."""
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    processed_events = {}
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    known_events = {}
    known_events_file = os.path.join(DATA_DIR, 'known_events.json')
    
    processed_events_file = os.path.join(DATA_DIR, 'processed_events.json')
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    if os.path.exists(known_events_file):
        try:
            with open(known_events_file, 'r') as f:
                known_events = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(processed_events_file):
        try:
            with open(processed_events_file, 'r') as f:
                processed_events = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á, –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    started_events = {}
    started_events_file = os.path.join(DATA_DIR, 'started_events.json')
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –≤—Å—Ç—Ä–µ—á
    if os.path.exists(started_events_file):
        try:
            with open(started_events_file, 'r') as f:
                started_events = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            token_files = [f for f in os.listdir(TOKEN_DIR) if f.startswith('token_') and f.endswith('.json')]
            
            for token_file in token_files:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    user_id = token_file.replace('token_', '').replace('.json', '')
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
                    events = await get_upcoming_events(
                        time_min=today, 
                        time_max=today + timedelta(days=7, hours=23, minutes=59, seconds=59),
                        user_id=user_id
                    )
                    
                    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
                    
                    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á
                    now = datetime.now(timezone.utc)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
                    for event in events:
                        event_id = event['id']
                        
                        # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ–≤–∞—è (–Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö)
                        if event_id not in known_events:
                            start_time = event['start'].get('dateTime', event['start'].get('date'))
                            start_dt = safe_parse_datetime(start_time)
                            end_time = event['end'].get('dateTime', event['end'].get('date'))
                            end_dt = safe_parse_datetime(end_time)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                            if start_dt > now:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ
                                new_meeting_info = (
                                    f"üìÖ {hbold('–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:')}\n\n"
                                    f"üìå {hbold(event['summary'])}\n"
                                    f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}\n\n"
                                )
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                                if 'hangoutLink' in event:
                                    new_meeting_info += f"üîó {event['hangoutLink']}\n"
                                    await bot.send_message(USER_ID, new_meeting_info, parse_mode="HTML")
                                    logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: {event['summary']} (ID: {event_id})")
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
                            known_events[event_id] = {
                                'summary': event['summary'],
                                'start_time': start_time,
                                'end_time': end_time,
                                'discovered_at': datetime.now().isoformat()
                            }
                    
                    for event in events:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–±—ã—Ç–∏—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Meet
                        if 'hangoutLink' in event:
                            event_id = event['id']
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è
                            start_time = event['start'].get('dateTime', event['start'].get('date'))
                            start_dt = safe_parse_datetime(start_time)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                            end_time = event['end'].get('dateTime', event['end'].get('date'))
                            end_dt = safe_parse_datetime(end_time)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
                            if event_id not in processed_events:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 15 –º–∏–Ω—É—Ç
                                time_until_start = start_dt - now
                                
                                if timedelta(0) <= time_until_start <= timedelta(minutes=15):
                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –≤—Å—Ç—Ä–µ—á–µ
                                    meeting_info = (
                                        f"üîî {hbold('–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞:')}\n\n"
                                        f"üìÖ {hbold(event['summary'])}\n"
                                        f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}\n\n"
                                    )
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                                    if 'hangoutLink' in event and USER_ID:
                                        meeting_info += f"üîó {event['hangoutLink']}"
                                        await bot.send_message(USER_ID, meeting_info, parse_mode="HTML")
                                        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: {event['summary']} (ID: {event_id})")
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                                    processed_events[event_id] = {
                                        'summary': event['summary'],
                                        'start_time': start_time,
                                        'notified_at': datetime.now().isoformat()
                                    }
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                                    try:
                                        with open(processed_events_file, 'w') as f:
                                            json.dump(processed_events, f)
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–∞—Å—å –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            if event_id not in started_events and start_dt <= now < end_dt:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–≤—à–µ–π—Å—è –≤—Å—Ç—Ä–µ—á–µ
                                meeting_started_info = (
                                    f"üöÄ {hbold('–í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å!')}\n\n"
                                    f"üìÖ {hbold(event['summary'])}\n"
                                    f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')} - {end_dt.strftime('%H:%M')}\n\n"
                                )
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet
                                if 'hangoutLink' in event and USER_ID:
                                    meeting_started_info += f"üîó {event['hangoutLink']}"
                                    await bot.send_message(USER_ID, meeting_started_info, parse_mode="HTML")
                                    logging.info(f"–í—Å—Ç—Ä–µ—á–∞ –Ω–∞—á–∞–ª–∞—Å—å: {event['summary']} (ID: {event_id})")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞—á–∞—Ç—ã—Ö
                                started_events[event_id] = {
                                    'summary': event['summary'],
                                    'start_time': start_time,
                                    'notified_at': datetime.now().isoformat()
                                }
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—á–∞—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
                                try:
                                    with open(started_events_file, 'w') as f:
                                        json.dump(started_events, f)
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
                            
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å—Ç—Ä–µ—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ started_events (–≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
            now = datetime.now(timezone.utc)
            events_to_remove = []
            
            for event_id, event_data in started_events.items():
                try:
                    end_time = event_data.get('end_time')
                    if end_time:
                        end_dt = safe_parse_datetime(end_time)
                        if now > end_dt:
                            events_to_remove.append(event_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ {event_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for event_id in events_to_remove:
                started_events.pop(event_id, None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞—á–∞—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if events_to_remove:
                try:
                    with open(started_events_file, 'w') as f:
                        json.dump(started_events, f)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞—á–∞—Ç—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ processed_events (–≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å)
            now = datetime.now(timezone.utc)
            events_to_remove = []
            
            for event_id, event_data in processed_events.items():
                try:
                    start_time = event_data.get('start_time')
                    if start_time:
                        start_dt = safe_parse_datetime(start_time)
                        if now > start_dt + timedelta(minutes=30):  # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
                            events_to_remove.append(event_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏ {event_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–≤—à–∏–µ—Å—è –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for event_id in events_to_remove:
                processed_events.pop(event_id, None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if events_to_remove:
                try:
                    with open(processed_events_file, 'w') as f:
                        json.dump(processed_events, f)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ known_events (–≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
            now = datetime.now(timezone.utc)
            events_to_remove = []
            
            for event_id, event_data in known_events.items():
                try:
                    end_time = event_data.get('end_time')
                    if end_time:
                        end_dt = safe_parse_datetime(end_time)
                        if now > end_dt + timedelta(days=1):  # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –¥–µ–Ω—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
                            events_to_remove.append(event_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ {event_id}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
            for event_id in events_to_remove:
                known_events.pop(event_id, None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
            if events_to_remove:
                try:
                    with open(known_events_file, 'w') as f:
                        json.dump(known_events, f)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á: {e}")
        
        # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(int(os.getenv('CHECK_INTERVAL', 300)))

# –ö–æ–º–∞–Ω–¥–∞ /debug –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(Command("debug"))
async def debug_info(message: Message):
    debug_message = (
        f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"- –í–∞—à ID: {message.from_user.id}\n"
        f"- –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID: {USER_ID}\n"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª processed_events.json
    if os.path.exists('processed_events.json'):
        try:
            with open('processed_events.json', 'r') as f:
                processed = json.load(f)
                debug_message += f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {len(processed)}\n"
        except Exception as e:
            debug_message += f"- –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è processed_events.json: {e}\n"
    else:
        debug_message += "- –§–∞–π–ª processed_events.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    try:
        events = await get_upcoming_events(limit=3)
        debug_message += f"- –ë–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(events)}\n"
        
        if events:
            debug_message += "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
            for event in events[:3]:
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                debug_message += f"  ‚Ä¢ {event['summary']} ({start_dt.strftime('%d.%m.%Y %H:%M')})\n"
                debug_message += f"    ID: {event['id']}\n"
                debug_message += f"    Meet: {'–î–∞' if 'hangoutLink' in event else '–ù–µ—Ç'}\n"
    except Exception as e:
        debug_message += f"- –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}\n"
    
    await message.answer(debug_message)

# –ö–æ–º–∞–Ω–¥–∞ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar
@dp.message(Command("auth"))
async def auth_command(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = create_auth_url(user_id)
    
    await message.answer(
        f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
        f"{auth_url}\n\n"
        f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"/code –ü–û–õ–£–ß–ï–ù–ù–´–ô_–ö–û–î"
    )

# –ö–æ–º–∞–Ω–¥–∞ /code –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("code"))
async def code_command(message: Message):
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /code")
        return
    
    code = parts[1].strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success, result_message = await process_auth_code(user_id, code)
        
        await message.answer(result_message)
        
        if success:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º USER_ID
            global USER_ID
            USER_ID = str(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º USER_ID –≤ .env —Ñ–∞–π–ª
            env_path = '.env'
            env_lines = []
            
            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º USER_ID
            user_id_found = False
            for i, line in enumerate(env_lines):
                if line.startswith('USER_ID='):
                    env_lines[i] = f'USER_ID={user_id}\n'
                    user_id_found = True
                    break
            
            if not user_id_found:
                env_lines.append(f'USER_ID={user_id}\n')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            with open(env_path, 'w') as f:
                f.writelines(env_lines)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("check"))
async def force_check_meetings(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    token_file = os.path.join(TOKEN_DIR, f'token_{user_id}.json')
    if not os.path.exists(token_file):
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    await message.answer("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events = await get_upcoming_events(
            time_min=datetime.now(), 
            time_max=datetime.now() + timedelta(days=7),
            user_id=user_id
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        processed_events = {}
        if os.path.exists('processed_events.json'):
            try:
                with open('processed_events.json', 'r') as f:
                    processed_events = json.load(f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        new_events_count = 0
        for event in events:
            event_id = event['id']
            
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ–≤–∞—è
            if event_id not in processed_events:
                new_events_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                processed_events[event_id] = {
                    'summary': event['summary'],
                    'processed_at': datetime.now().isoformat()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                meeting_info = (
                    f"üÜï {hbold('–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!')}\n"
                    f"üìÖ {hbold(event['summary'])}\n"
                    f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if 'hangoutLink' in event:
                    meeting_info += f"üîó [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ]({event['hangoutLink']})"
                    await message.answer(meeting_info, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open('processed_events.json', 'w') as f:
            json.dump(processed_events, f)
        
        if new_events_count == 0:
            await message.answer("–ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        else:
            await message.answer(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {new_events_count} –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /authstatus –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("authstatus"))
async def auth_status_command(message: Message):
    user_id = message.from_user.id
    token_file = os.path.join(TOKEN_DIR, f'token_{user_id}.json')
    
    if os.path.exists(token_file):
        try:
            with open(token_file, 'r') as f:
                creds_data = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–æ–∫–µ–Ω–µ
            if 'token' in creds_data and 'refresh_token' in creds_data:
                await message.answer(
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
                    "–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."
                )
            else:
                await message.answer(
                    "‚ö†Ô∏è –í–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–ø–æ–ª–Ω—ã–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                )
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n"
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /auth."
            )
    else:
        await message.answer(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )

# –ö–æ–º–∞–Ω–¥–∞ /localauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
@dp.message(Command("localauth"))
async def local_auth_command(message: Message):
    user_id = message.from_user.id
    
    await message.answer(
        "–ó–∞–ø—É—Å–∫–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar...\n"
        "–°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(run_local_auth(message, user_id))

async def run_local_auth(message, user_id):
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        creds = await get_credentials_with_local_server(user_id)
        
        if creds:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º USER_ID
            global USER_ID
            USER_ID = str(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º USER_ID –≤ .env —Ñ–∞–π–ª
            env_path = '.env'
            env_lines = []
            
            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º USER_ID
            user_id_found = False
            for i, line in enumerate(env_lines):
                if line.startswith('USER_ID='):
                    env_lines[i] = f'USER_ID={user_id}\n'
                    user_id_found = True
                    break
            
            if not user_id_found:
                env_lines.append(f'USER_ID={user_id}\n')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            with open(env_path, 'w') as f:
                f.writelines(env_lines)
            
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º."
            )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@dp.message(Command("manualtoken"))
async def manual_token_command(message: Message):
    await message.answer(
        "–î–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "/settoken {\"token\": \"–≤–∞—à_—Ç–æ–∫–µ–Ω\", \"refresh_token\": \"–≤–∞—à_—Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω\", ...}\n\n"
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —á–µ—Ä–µ–∑ API Console."
    )

# –ö–æ–º–∞–Ω–¥–∞ /settoken –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("settoken"))
async def set_token_command(message: Message):
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken")
        return
    
    token_json = parts[1].strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        token_data = json.loads(token_json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if 'token' not in token_data or 'refresh_token' not in token_data:
            await message.answer("‚ùå JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è 'token' –∏ 'refresh_token'")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
        token_file = os.path.join(TOKEN_DIR, f'token_{user_id}.json')
        with open(token_file, 'w') as f:
            f.write(token_json)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º USER_ID
        global USER_ID
        USER_ID = str(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º USER_ID –≤ .env —Ñ–∞–π–ª
        env_path = '.env'
        env_lines = []
        
        if os.path.exists(env_path):
            with open(env_path, 'r') as f:
                env_lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º USER_ID
        user_id_found = False
        for i, line in enumerate(env_lines):
            if line.startswith('USER_ID='):
                env_lines[i] = f'USER_ID={user_id}\n'
                user_id_found = True
                break
        
        if not user_id_found:
            env_lines.append(f'USER_ID={user_id}\n')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
        with open(env_path, 'w') as f:
            f.writelines(env_lines)
        
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check.")
    except json.JSONDecodeError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /serverauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
@dp.message(Command("serverauth"))
async def server_auth_command(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    auth_url = create_auth_url(user_id)
    
    await message.answer(
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
        f"{auth_url}\n\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
        "3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ\n\n"
        "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É:\n"
        "/code –ü–û–õ–£–ß–ï–ù–ù–´–ô_–ö–û–î\n\n"
        "‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /manualtoken",
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /authinfo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("authinfo"))
async def auth_info_command(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials.json
    if not os.path.exists('credentials.json'):
        await message.answer("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å OAuth-–∫–ª–∏–µ–Ω—Ç –≤ Google Cloud Console.")
        return
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        with open('credentials.json', 'r') as f:
            client_data = json.load(f)
        
        client_info = client_data.get('installed', client_data.get('web', {}))
        
        auth_info = (
            "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± OAuth-–∫–ª–∏–µ–Ω—Ç–µ:</b>\n\n"
            f"üîπ –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {'Web' if 'web' in client_data else 'Desktop'}\n"
            f"üîπ Client ID: {client_info.get('client_id', '–ù–µ –Ω–∞–π–¥–µ–Ω')[:15]}...\n"
            f"üîπ Redirect URIs: {', '.join(client_info.get('redirect_uris', ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã']))}\n\n"
            "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –í Google Cloud Console –≤–∫–ª—é—á–µ–Ω Calendar API\n"
            "2. –ù–∞—Å—Ç—Ä–æ–µ–Ω OAuth consent screen\n"
            "3. –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—à email –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "4. –í redirect URIs –¥–æ–±–∞–≤–ª–µ–Ω urn:ietf:wg:oauth:2.0:oob"
        )
        
        await message.answer(auth_info, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /notifications –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message(Command("notifications"))
async def notifications_settings(message: Message):
    user_id = message.from_user.id
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
        "–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        "‚úÖ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏\n"
        "‚úÖ –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏\n"
        "‚úÖ –í –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏\n\n"
        "–î–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset\n"
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∑–∞–Ω–æ–≤–æ.",
        parse_mode="HTML"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á
    asyncio.create_task(scheduled_meetings_check())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
