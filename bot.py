import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
import json
import os.path

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from google_calendar import get_upcoming_events

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
USER_ID = os.getenv("USER_ID")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def command_start(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –≤ Google Meet."
    )
    user_id = message.from_user.id
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –∏–º—è: {message.from_user.full_name}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ .env —Ñ–∞–π–ª
    if USER_ID or USER_ID == str(user_id):
        await message.answer(f"–í–∞—à ID {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        logging.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª")

# –ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command("week"))
async def check_week_meetings(message: Message):
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        events = await get_upcoming_events(
            time_min=datetime.now(),
            time_max=datetime.now() + timedelta(days=7),
            limit=20
        )
        
        if not events:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        meetings_by_day = {}
        for event in events:
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            start_dt = safe_parse_datetime(start_time)
            day_key = start_dt.strftime('%d.%m.%Y')
            
            if day_key not in meetings_by_day:
                meetings_by_day[day_key] = []
            
            meetings_by_day[day_key].append(event)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = f"üìÜ {hbold(f'–í—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n\n"
            
            for event in day_events:
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–µ—á–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Meet
                if 'hangoutLink' in event:
                    day_message += (
                        f"üïí {start_dt.strftime('%H:%M')} - {hbold(event['summary'])}\n"
                        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á—É]({event['hangoutLink']})\n\n"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏
            if "üîó" in day_message:
                await message.answer(day_message, parse_mode="HTML")
            else:
                await message.answer(f"üìÜ {hbold(f'–ù–∞ {day} –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á')}", parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("reset"))
async def reset_processed_events(message: Message):
    if os.path.exists('processed_events.json'):
        os.remove('processed_events.json')
        await message.answer("–ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∫ –æ –Ω–æ–≤—ã—Ö.")
    else:
        await message.answer("–ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –ø—É—Å—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
def safe_parse_datetime(date_str):
    try:
        if date_str.endswith('Z'):
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        elif '+' in date_str or '-' in date_str and 'T' in date_str:
            return datetime.fromisoformat(date_str)
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º UTC
            return datetime.fromisoformat(date_str).replace(tzinfo=timezone.utc)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {date_str}: {e}")
        return datetime.now(timezone.utc)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def scheduled_meetings_check():
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
    processed_events = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists('processed_events.json'):
        try:
            with open('processed_events.json', 'r') as f:
                processed_events = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –Ω–∞—á–∞–ª–µ –≤—Å—Ç—Ä–µ—á
    notified_events = {}
    
    logging.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_events)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
            events = await get_upcoming_events(
                time_min=datetime.now(), 
                time_max=datetime.now() + timedelta(days=7)
            )
            
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
            for event in events:
                event_id = event['id']
                
                # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ–≤–∞—è (–Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ)
                if event_id not in processed_events:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                    processed_events[event_id] = {
                        'summary': event['summary'],
                        'processed_at': datetime.now().isoformat()
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                    try:
                        with open('processed_events.json', 'w') as f:
                            json.dump(processed_events, f)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ
                    start_time = event['start'].get('dateTime', event['start'].get('date'))
                    start_dt = safe_parse_datetime(start_time)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    meeting_info = (
                        f"üÜï {hbold('–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!')}\n"
                        f"üìÖ {hbold(event['summary'])}\n"
                        f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if 'hangoutLink' in event and USER_ID:
                        meeting_info += f"üîó [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ]({event['hangoutLink']})"
                        await bot.send_message(USER_ID, meeting_info, parse_mode="HTML")
                        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞: {event['summary']} (ID: {event_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è
            current_time = datetime.now(timezone.utc)
            for event in events:
                event_id = event['id']
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 15 –º–∏–Ω—É—Ç
                time_until_meeting = (start_dt - current_time).total_seconds() / 60
                
                if 0 <= time_until_meeting <= 15:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏
                    # –∏–ª–∏ –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if event_id not in notified_events:
                        # –ü–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        notified_events[event_id] = current_time.isoformat()
                        send_notification = True
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 5 –º–∏–Ω—É—Ç —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        last_notification_time = notified_events[event_id]
                        if isinstance(last_notification_time, str):
                            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ
                            last_notification_time = safe_parse_datetime(last_notification_time)
                            notified_events[event_id] = last_notification_time
                        
                        time_since_last = (current_time - last_notification_time).total_seconds()
                        send_notification = time_since_last >= 300  # 5 –º–∏–Ω—É—Ç
                        
                        if send_notification:
                            notified_events[event_id] = current_time.isoformat()
                    
                    if send_notification:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        meeting_info = (
                            f"‚ö†Ô∏è {hbold('–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –≤—Å—Ç—Ä–µ—á–∞!')}\n"
                            f"üìÖ {hbold(event['summary'])}\n"
                            f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {int(time_until_meeting)} –º–∏–Ω—É—Ç\n"
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Meet, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if 'hangoutLink' in event:
                            meeting_info += f"üîó [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ]({event['hangoutLink']})"
                        
                        if USER_ID:
                            await bot.send_message(USER_ID, meeting_info, parse_mode="HTML")
                            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –Ω–∞—á–∞–ª–µ –≤—Å—Ç—Ä–µ—á–∏: {event['summary']} (—á–µ—Ä–µ–∑ {int(time_until_meeting)} –º–∏–Ω—É—Ç)")
            
            # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (–ø—Ä–æ—à–µ–¥—à–∏—Ö)
            current_time = datetime.now(timezone.utc)
            new_processed_events = {}

            for event_id, event_data in processed_events.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
                event_still_exists = False
                for event in events:
                    if event['id'] == event_id:
                        event_still_exists = True
                        break
                
                # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                if event_still_exists:
                    new_processed_events[event_id] = event_data

            processed_events = new_processed_events

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            try:
                with open('processed_events.json', 'w') as f:
                    json.dump(processed_events, f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
            
            logging.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å {len(processed_events)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å—Ç—Ä–µ—á: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        await asyncio.sleep(int(os.getenv("CHECK_INTERVAL", 300)))

# –ö–æ–º–∞–Ω–¥–∞ /debug –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.message(Command("debug"))
async def debug_info(message: Message):
    debug_message = (
        f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"- –í–∞—à ID: {message.from_user.id}\n"
        f"- –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π USER_ID: {USER_ID}\n"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª processed_events.json
    if os.path.exists('processed_events.json'):
        try:
            with open('processed_events.json', 'r') as f:
                processed = json.load(f)
                debug_message += f"- –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {len(processed)}\n"
        except Exception as e:
            debug_message += f"- –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è processed_events.json: {e}\n"
    else:
        debug_message += "- –§–∞–π–ª processed_events.json –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    try:
        events = await get_upcoming_events(limit=3)
        debug_message += f"- –ë–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: {len(events)}\n"
        
        if events:
            debug_message += "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
            for event in events[:3]:
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                debug_message += f"  ‚Ä¢ {event['summary']} ({start_dt.strftime('%d.%m.%Y %H:%M')})\n"
                debug_message += f"    ID: {event['id']}\n"
                debug_message += f"    Meet: {'–î–∞' if 'hangoutLink' in event else '–ù–µ—Ç'}\n"
    except Exception as e:
        debug_message += f"- –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {e}\n"
    
    await message.answer(debug_message)

# –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("check"))
async def force_check_meetings(message: Message):
    await message.answer("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events = await get_upcoming_events(
            time_min=datetime.now(), 
            time_max=datetime.now() + timedelta(days=7)
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        processed_events = {}
        if os.path.exists('processed_events.json'):
            try:
                with open('processed_events.json', 'r') as f:
                    processed_events = json.load(f)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        new_events_count = 0
        for event in events:
            event_id = event['id']
            
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ–≤–∞—è
            if event_id not in processed_events:
                new_events_count += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                processed_events[event_id] = {
                    'summary': event['summary'],
                    'processed_at': datetime.now().isoformat()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                meeting_info = (
                    f"üÜï {hbold('–ù–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!')}\n"
                    f"üìÖ {hbold(event['summary'])}\n"
                    f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                if 'hangoutLink' in event:
                    meeting_info += f"üîó [–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–µ]({event['hangoutLink']})"
                    await message.answer(meeting_info, parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        with open('processed_events.json', 'w') as f:
            json.dump(processed_events, f)
        
        if new_events_count == 0:
            await message.answer("–ù–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        else:
            await message.answer(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {new_events_count} –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á
    asyncio.create_task(scheduled_meetings_check())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
