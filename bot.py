import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
import json
import os.path

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv

from google_calendar import get_upcoming_events, create_auth_url, process_auth_code, get_credentials_with_local_server
from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = os.getenv("DATA_DIR", ".")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(DATA_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(DATA_DIR, 'calendar_bot.db')
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
os.makedirs(os.path.dirname(db_path), exist_ok=True)
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
    with open(db_path, 'a'):
        pass
except PermissionError:
    logging.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    # –ü—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞
    try:
        os.chmod(db_path, 0o666)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

db = Database(db_path)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def command_start(message: Message):
    user_id = message.from_user.id
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –≤ Google Meet.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Google Calendar.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "1. –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä —Å –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /serverauth\n"
        "2. –õ–æ–∫–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ): /localauth\n"
        "3. –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π): /manualtoken"
    )
    
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –∏–º—è: {message.from_user.full_name}")

# –ö–æ–º–∞–Ω–¥–∞ /week –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command("week"))
async def check_week_meetings(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.get_token(user_id):
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /serverauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    await message.answer("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à–∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        now = datetime.now(timezone.utc)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
        current_weekday = today.weekday()
        if current_weekday >= 5:  # –°—É–±–±–æ—Ç–∞ (5) –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (6)
            week_start = today + timedelta(days=(6 - current_weekday))
        else:
            week_start = today - timedelta(days=current_weekday)
            
        events = await get_upcoming_events(
            time_min=week_start,
            time_max=week_start + timedelta(days=6),
            limit=20,
            user_id=user_id,
            db=db
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        active_events = []
        for event in events:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if 'hangoutLink' not in event:
                continue
                
            end_time = event['end'].get('dateTime', event['end'].get('date'))
            end_dt = safe_parse_datetime(end_time)
            if end_dt > now:
                active_events.append(event)
        
        if not active_events:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        meetings_by_day = {}
        for event in active_events:
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            start_dt = safe_parse_datetime(start_time)
            day_key = start_dt.strftime('%d.%m.%Y')
            
            if day_key not in meetings_by_day:
                meetings_by_day[day_key] = []
            
            meetings_by_day[day_key].append(event)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –¥–Ω—è–º
        for day, day_events in sorted(meetings_by_day.items()):
            day_message = f"üìÜ {hbold(f'–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ {day}:')}\n\n"
            has_meetings = False
            
            for event in day_events:
                start_time = event['start'].get('dateTime', event['start'].get('date'))
                start_dt = safe_parse_datetime(start_time)
                
                day_message += f"üïí {start_dt.strftime('%H:%M')} - {hbold(event['summary'])}\n"
                day_message += f"üîó {event['hangoutLink']}\n\n"
                has_meetings = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            if has_meetings:
                await message.answer(day_message, parse_mode="HTML")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –Ω–∞ –Ω–µ–¥–µ–ª—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.")

# –ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—ç—à–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("reset"))
async def reset_processed_events(message: Message):
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        db.reset_all()
        await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∫ –æ –Ω–æ–≤—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
def safe_parse_datetime(date_str):
    try:
        if date_str.endswith('Z'):
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        elif '+' in date_str or '-' in date_str and 'T' in date_str:
            return datetime.fromisoformat(date_str)
        else:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º UTC
            return datetime.fromisoformat(date_str).replace(tzinfo=timezone.utc)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã {date_str}: {e}")
        return datetime.now(timezone.utc)

async def get_upcoming_meetings(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    meetings = set()
    try:
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        events = await get_upcoming_events(
            time_min=today,
            time_max=today + timedelta(days=6),
            user_id=user_id,
            db=db
        )
        
        for event in events:
            if 'hangoutLink' in event:
                meetings.add((event['id'], event['summary'], event['hangoutLink'], event['start'].get('dateTime', event['start'].get('date'))))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    return meetings

async def notify_about_meeting(meeting, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    event_id, summary, hangout_link, start_time = meeting
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if not db.is_notification_sent(event_id, user_id):
            start_dt = safe_parse_datetime(start_time)
            meeting_info = (
                f"üìÖ {hbold('–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞:')}\n\n"
                f"üìå {hbold(summary)}\n"
                f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                f"üîó {hangout_link}\n"
            )
            await bot.send_message(
                user_id,
                meeting_info,
                parse_mode="HTML"
            )
            # –ü–æ–º–µ—á–∞–µ–º –≤—Å—Ç—Ä–µ—á—É –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—É—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            db.add_known_event(event_id, summary, start_time, None, user_id, notification_sent=True)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤—Å—Ç—Ä–µ—á–µ {summary}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def scheduled_meetings_check():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_first_run = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    while True:
        try:
            users = db.get_all_users()
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            for user_id in users:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º first_run –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id not in user_first_run:
                    user_first_run[user_id] = True
                    logging.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_meetings = await get_upcoming_meetings(user_id)
                
                if not user_first_run[user_id]:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –≤—Å—Ç—Ä–µ—á—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    for meeting in current_meetings:
                        event_id, summary, hangout_link, start_time = meeting
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if not db.is_notification_sent(event_id, user_id):
                            await notify_about_meeting(meeting, user_id)
                        
                else:
                    # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ
                    for meeting in current_meetings:
                        event_id, summary, _, _ = meeting
                        db.add_known_event(event_id, summary, None, None, user_id, notification_sent=True)
                    user_first_run[user_id] = False
                    logging.info(f"–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(current_meetings)} –≤—Å—Ç—Ä–µ—á")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–ª–æ–≤–∞—Ä—è first_run –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –±–∞–∑–µ
            for user_id in list(user_first_run.keys()):
                if user_id not in users:
                    del user_first_run[user_id]
            
            await asyncio.sleep(int(os.getenv('CHECK_INTERVAL', 300)))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å—Ç—Ä–µ—á: {e}")
            await asyncio.sleep(int(os.getenv('CHECK_INTERVAL', 300)))

# –ö–æ–º–∞–Ω–¥–∞ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar
@dp.message(Command("auth"))
async def auth_command(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = create_auth_url(user_id, db)
    
    await message.answer(
        f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Calendar, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
        f"{auth_url}\n\n"
        f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"/code –ü–û–õ–£–ß–ï–ù–ù–´–ô_–ö–û–î"
    )

# –ö–æ–º–∞–Ω–¥–∞ /code –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("code"))
async def process_auth_code_command(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /code")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
    code = message.text.split(maxsplit=1)[1].strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        success, result = await process_auth_code(user_id, code, db)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await processing_msg.edit_text(result)
        
        if success:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º USER_ID
            global USER_ID
            USER_ID = str(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º USER_ID –≤ .env —Ñ–∞–π–ª
            env_path = '.env'
            env_lines = []
            
            if os.path.exists(env_path):
                with open(env_path, 'r') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º USER_ID
            user_id_found = False
            for i, line in enumerate(env_lines):
                if line.startswith('USER_ID='):
                    env_lines[i] = f'USER_ID={user_id}\n'
                    user_id_found = True
                    break
            
            if not user_id_found:
                env_lines.append(f'USER_ID={user_id}\n')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            with open(env_path, 'w') as f:
                f.writelines(env_lines)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á
@dp.message(Command("check"))
async def check_command(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not db.get_token(user_id):
        await message.answer(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Google Calendar.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /serverauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        events = await get_upcoming_events(
            time_min=datetime.now(), 
            time_max=datetime.now() + timedelta(days=7),
            limit=10,
            user_id=user_id,
            db=db
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        known_events = db.get_known_events(user_id)
        current_event_ids = set()
        new_events_count = 0
        deleted_events_count = 0
        changed_events_count = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        for event in events:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if 'hangoutLink' not in event:
                continue
                
            event_id = event['id']
            current_event_ids.add(event_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
            start_time = event['start'].get('dateTime', event['start'].get('date'))
            end_time = event['end'].get('dateTime', event['end'].get('date'))
            start_dt = safe_parse_datetime(start_time)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_sent = db.is_notification_sent(event_id, user_id)
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á–∏ {event['summary']} (ID: {event_id}): notification_sent = {notification_sent}")
            
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ–≤–∞—è –∏–ª–∏ –æ –Ω–µ–π –Ω–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not db.is_event_known(event_id, user_id) or not notification_sent:
                new_events_count += 1
                
                meeting_info = (
                    f"üìÖ {hbold('–ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞:')}\n\n"
                    f"üìå {hbold(event['summary'])}\n"
                    f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîó {event['hangoutLink']}\n"
                )
                
                await message.answer(meeting_info, parse_mode="HTML")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏ –ø–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                db.add_known_event(
                    event_id=event_id,
                    summary=event['summary'],
                    start_time=start_time,
                    end_time=end_time,
                    user_id=user_id,
                    notification_sent=True  # –í–∞–∂–Ω–æ: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if not db.is_notification_sent(event_id, user_id):
                    logging.error(f"–û—à–∏–±–∫–∞: —Ñ–ª–∞–≥ notification_sent –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {event_id}")
                else:
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /check –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤—Å—Ç—Ä–µ—á–µ {event['summary']}")
            else:
                # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                known_event = next((e for e in known_events if e['event_id'] == event_id), None)
                if known_event and (known_event['start_time'] != start_time or known_event['end_time'] != end_time):
                    changed_events_count += 1
                    change_info = (
                        f"üîÑ {hbold('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–µ:')}\n\n"
                        f"üìå {hbold(event['summary'])}\n"
                        f"üïí {start_dt.strftime('%d.%m.%Y %H:%M')}\n"
                        f"üîó {event['hangoutLink']}\n"
                    )
                    await message.answer(change_info, parse_mode="HTML")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
                db.add_known_event(
                    event_id=event_id,
                    summary=event['summary'],
                    start_time=start_time,
                    end_time=end_time,
                    user_id=user_id,
                    notification_sent=True  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        for known_event in known_events:
            if known_event['event_id'] not in current_event_ids:
                deleted_events_count += 1
                
                deleted_meeting_info = (
                    f"‚ùå {hbold('–û–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:')}\n\n"
                    f"üìå {hbold(known_event['summary'])}\n"
                    f"üïí {safe_parse_datetime(known_event['start_time']).strftime('%d.%m.%Y %H:%M')}\n"
                )
                
                await message.answer(deleted_meeting_info, parse_mode="HTML")
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –±–∞–∑—ã
                db.delete_known_event(known_event['event_id'], user_id)
        
        if new_events_count == 0 and deleted_events_count == 0 and changed_events_count == 0:
            await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å—Ç—Ä–µ—á: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /localauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
@dp.message(Command("localauth"))
async def local_auth_command(message: Message):
    user_id = message.from_user.id
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        creds = await get_credentials_with_local_server()
        
        if creds:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.save_token(user_id, json.loads(creds.to_json()))
            
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
                "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏\n"
                "/week - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º USER_ID
            global USER_ID
            USER_ID = str(user_id)
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /serverauth"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /serverauth"
        )

# –ö–æ–º–∞–Ω–¥–∞ /manualtoken –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@dp.message(Command("manualtoken"))
async def manual_token_command(message: Message):
    await message.answer(
        "–î–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "/settoken {\"token\": \"–≤–∞—à_—Ç–æ–∫–µ–Ω\", \"refresh_token\": \"–≤–∞—à_—Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω\", ...}\n\n"
        "–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏–ª–∏ —á–µ—Ä–µ–∑ API Console."
    )

# –ö–æ–º–∞–Ω–¥–∞ /settoken –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
@dp.message(Command("settoken"))
async def set_token_command(message: Message):
    user_id = message.from_user.id
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settoken")
        return
    
    token_json = parts[1].strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
        token_data = json.loads(token_json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
        if 'token' not in token_data or 'refresh_token' not in token_data:
            await message.answer("‚ùå JSON-–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è 'token' –∏ 'refresh_token'")
            return        
        
        await message.answer("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /week –∏ /check.")
    except json.JSONDecodeError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /serverauth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
@dp.message(Command("serverauth"))
async def server_auth_command(message: Message):
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    auth_url = create_auth_url(user_id, db)
    
    await message.answer(
        "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
        f"{auth_url}\n\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Google –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n"
        "3Ô∏è‚É£ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ\n\n"
        "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É:\n"
        "/code –ü–û–õ–£–ß–ï–ù–ù–´–ô_–ö–û–î\n\n"
        "‚ùó –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /manualtoken",
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /authinfo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("authinfo"))
async def auth_info_command(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials.json
    if not os.path.exists('credentials.json'):
        await message.answer("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å OAuth-–∫–ª–∏–µ–Ω—Ç –≤ Google Cloud Console.")
        return
    
    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    try:
        with open('credentials.json', 'r') as f:
            client_data = json.load(f)
        
        client_info = client_data.get('installed', client_data.get('web', {}))
        
        auth_info = (
            "üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± OAuth-–∫–ª–∏–µ–Ω—Ç–µ:</b>\n\n"
            f"üîπ –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {'Web' if 'web' in client_data else 'Desktop'}\n"
            f"üîπ Client ID: {client_info.get('client_id', '–ù–µ –Ω–∞–π–¥–µ–Ω')[:15]}...\n"
            f"üîπ Redirect URIs: {', '.join(client_info.get('redirect_uris', ['–ù–µ –Ω–∞–π–¥–µ–Ω—ã']))}\n\n"
            "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –í Google Cloud Console –≤–∫–ª—é—á–µ–Ω Calendar API\n"
            "2. –ù–∞—Å—Ç—Ä–æ–µ–Ω OAuth consent screen\n"
            "3. –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—à email –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "4. –í redirect URIs –¥–æ–±–∞–≤–ª–µ–Ω urn:ietf:wg:oauth:2.0:oob"
        )
        
        await message.answer(auth_info, parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")

# –ö–æ–º–∞–Ω–¥–∞ /notifications –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message(Command("notifications"))
async def notifications_settings(message: Message):
    user_id = message.from_user.id
    
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
        "–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
        "‚úÖ –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤—Å—Ç—Ä–µ—á–∏\n"
        "‚úÖ –ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏\n"
        "‚úÖ –í –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏\n\n"
        "–î–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset\n"
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –∑–∞–Ω–æ–≤–æ.",
        parse_mode="HTML"
    )

async def notify_before_meeting(meeting, user_id, minutes_before):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—Å—Ç—Ä–µ—á–∏"""
    event_id, summary, hangout_link, start_time = meeting
    try:
        start_dt = safe_parse_datetime(start_time)
        now = datetime.now(timezone.utc)
        reminder_time = start_dt - timedelta(minutes=minutes_before)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if now >= reminder_time and not db.is_event_started(event_id, user_id, minutes_before):
            await bot.send_message(
                user_id,
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Å—Ç—Ä–µ—á–∞ {summary} –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {minutes_before} –º–∏–Ω—É—Ç.\nüîó {hangout_link}",
                parse_mode="HTML"
            )
            # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
            db.add_started_event(event_id, summary, start_time, None, user_id, minutes_before)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –≤—Å—Ç—Ä–µ—á–µ {summary} –∑–∞ {minutes_before} –º–∏–Ω—É—Ç")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å—Ç—Ä–µ—á
    asyncio.create_task(scheduled_meetings_check())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
